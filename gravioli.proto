syntax = "proto2";

package api;


message GravioliMessage {
  optional Registration request = 1;
  optional Acceptance accept = 2;
  optional World world = 3;
  optional Action action = 4;
}


message Registration {
    required string name = 1; // empty string = just visualizer
}


message Acceptance {
    required uint32 id = 1; // player id
}


message Sphere {
    required double x = 1;
    required double y = 2;
    required double mass = 4;
    required double radius = 5;
}

message Player {
    required uint32 id          = 1; // referenced from Shot.origin
    required string name        = 2;
    required uint32 skillpoints = 3; // to be used later
    required uint32 homebaseID  = 4; // reference to Planet.id
    required double aim         = 5; // in radian (0 - 2pi)
    required double cooldown    = 6; // remaining time in seconds
}

message Shot {
    required uint32 id     = 1;
    optional uint32 origin = 2; // reference to Player.id
    required Sphere sphere = 3;
    required double dir    = 4; // in radian (0 - 2pi)
    required double speed  = 5;
    required double ttl    = 6; // time in seconds
    required double dmg    = 7; // inflicted dmg on impact
}

message Planet {
    required uint32 id     = 1; // referenced from Player.homebaseID (not all planets are homebases)
    required Sphere sphere = 2;
    required double health = 3;
}

message World {
    repeated Planet planets = 1;
    repeated Shot   shots   = 2;
    repeated Player players = 3;
}


message Action {
    optional RotateAction rot = 1;
    optional FireAction fire = 2;
    optional PerkPurchaseAction perk = 3;
    optional GunsightPositioningAction gun = 4;
}

message RotateAction {
    enum Dir {
        HALT = 0;
        LEFT = 1; // counter clockwise
        RIGHT = 2; // clockwise
    }
    required Dir dir = 1;
}

message FireAction {
    enum Projectile {
        NOTHING = 0;
        SHOT = 1;
        LASER = 2;
    }
    required Projectile firing = 1;
}

message PerkPurchaseAction {
    required string perk = 1;
}

message GunsightPositioningAction {
    required double position = 1; // radian
}
